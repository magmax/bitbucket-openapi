# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HookEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'description': 'str',
        'event': 'str',
        'label': 'str'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'event': 'event',
        'label': 'label'
    }

    def __init__(self, category=None, description=None, event=None, label=None):  # noqa: E501
        """HookEvent - a model defined in OpenAPI"""  # noqa: E501

        self._category = None
        self._description = None
        self._event = None
        self._label = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if event is not None:
            self.event = event
        if label is not None:
            self.label = label

    @property
    def category(self):
        """Gets the category of this HookEvent.  # noqa: E501

        The category this event belongs to.  # noqa: E501

        :return: The category of this HookEvent.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HookEvent.

        The category this event belongs to.  # noqa: E501

        :param category: The category of this HookEvent.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this HookEvent.  # noqa: E501

        More detailed description of the webhook event type.  # noqa: E501

        :return: The description of this HookEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HookEvent.

        More detailed description of the webhook event type.  # noqa: E501

        :param description: The description of this HookEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this HookEvent.  # noqa: E501

        The event identifier.  # noqa: E501

        :return: The event of this HookEvent.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HookEvent.

        The event identifier.  # noqa: E501

        :param event: The event of this HookEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["pullrequest:unapproved", "issue:comment_created", "pullrequest:approved", "repo:created", "repo:deleted", "repo:imported", "pullrequest:comment_updated", "issue:updated", "project:updated", "pullrequest:comment_created", "repo:commit_status_updated", "pullrequest:updated", "issue:created", "repo:fork", "pullrequest:comment_deleted", "repo:commit_status_created", "repo:updated", "pullrequest:rejected", "pullrequest:fulfilled", "repo:push", "pullrequest:created", "repo:transfer", "repo:commit_comment_created"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def label(self):
        """Gets the label of this HookEvent.  # noqa: E501

        Summary of the webhook event type.  # noqa: E501

        :return: The label of this HookEvent.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this HookEvent.

        Summary of the webhook event type.  # noqa: E501

        :param label: The label of this HookEvent.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HookEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Pipeline(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'build_number': 'int',
        'build_seconds_used': 'int',
        'completed_on': 'datetime',
        'created_on': 'datetime',
        'creator': 'Account',
        'repository': 'Repository',
        'state': 'PipelineState',
        'target': 'PipelineTarget',
        'trigger': 'PipelineTrigger',
        'uuid': 'str'
    }

    attribute_map = {
        'build_number': 'build_number',
        'build_seconds_used': 'build_seconds_used',
        'completed_on': 'completed_on',
        'created_on': 'created_on',
        'creator': 'creator',
        'repository': 'repository',
        'state': 'state',
        'target': 'target',
        'trigger': 'trigger',
        'uuid': 'uuid'
    }

    def __init__(self, build_number=None, build_seconds_used=None, completed_on=None, created_on=None, creator=None, repository=None, state=None, target=None, trigger=None, uuid=None):  # noqa: E501
        """Pipeline - a model defined in OpenAPI"""  # noqa: E501

        self._build_number = None
        self._build_seconds_used = None
        self._completed_on = None
        self._created_on = None
        self._creator = None
        self._repository = None
        self._state = None
        self._target = None
        self._trigger = None
        self._uuid = None
        self.discriminator = None

        if build_number is not None:
            self.build_number = build_number
        if build_seconds_used is not None:
            self.build_seconds_used = build_seconds_used
        if completed_on is not None:
            self.completed_on = completed_on
        if created_on is not None:
            self.created_on = created_on
        if creator is not None:
            self.creator = creator
        if repository is not None:
            self.repository = repository
        if state is not None:
            self.state = state
        if target is not None:
            self.target = target
        if trigger is not None:
            self.trigger = trigger
        if uuid is not None:
            self.uuid = uuid

    @property
    def build_number(self):
        """Gets the build_number of this Pipeline.  # noqa: E501

        The build number of the pipeline.  # noqa: E501

        :return: The build_number of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this Pipeline.

        The build number of the pipeline.  # noqa: E501

        :param build_number: The build_number of this Pipeline.  # noqa: E501
        :type: int
        """

        self._build_number = build_number

    @property
    def build_seconds_used(self):
        """Gets the build_seconds_used of this Pipeline.  # noqa: E501

        The number of build seconds used by this pipeline.  # noqa: E501

        :return: The build_seconds_used of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._build_seconds_used

    @build_seconds_used.setter
    def build_seconds_used(self, build_seconds_used):
        """Sets the build_seconds_used of this Pipeline.

        The number of build seconds used by this pipeline.  # noqa: E501

        :param build_seconds_used: The build_seconds_used of this Pipeline.  # noqa: E501
        :type: int
        """

        self._build_seconds_used = build_seconds_used

    @property
    def completed_on(self):
        """Gets the completed_on of this Pipeline.  # noqa: E501

        The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.  # noqa: E501

        :return: The completed_on of this Pipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this Pipeline.

        The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.  # noqa: E501

        :param completed_on: The completed_on of this Pipeline.  # noqa: E501
        :type: datetime
        """

        self._completed_on = completed_on

    @property
    def created_on(self):
        """Gets the created_on of this Pipeline.  # noqa: E501

        The timestamp when the pipeline was created.  # noqa: E501

        :return: The created_on of this Pipeline.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Pipeline.

        The timestamp when the pipeline was created.  # noqa: E501

        :param created_on: The created_on of this Pipeline.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def creator(self):
        """Gets the creator of this Pipeline.  # noqa: E501


        :return: The creator of this Pipeline.  # noqa: E501
        :rtype: Account
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Pipeline.


        :param creator: The creator of this Pipeline.  # noqa: E501
        :type: Account
        """

        self._creator = creator

    @property
    def repository(self):
        """Gets the repository of this Pipeline.  # noqa: E501


        :return: The repository of this Pipeline.  # noqa: E501
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Pipeline.


        :param repository: The repository of this Pipeline.  # noqa: E501
        :type: Repository
        """

        self._repository = repository

    @property
    def state(self):
        """Gets the state of this Pipeline.  # noqa: E501


        :return: The state of this Pipeline.  # noqa: E501
        :rtype: PipelineState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Pipeline.


        :param state: The state of this Pipeline.  # noqa: E501
        :type: PipelineState
        """

        self._state = state

    @property
    def target(self):
        """Gets the target of this Pipeline.  # noqa: E501


        :return: The target of this Pipeline.  # noqa: E501
        :rtype: PipelineTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Pipeline.


        :param target: The target of this Pipeline.  # noqa: E501
        :type: PipelineTarget
        """

        self._target = target

    @property
    def trigger(self):
        """Gets the trigger of this Pipeline.  # noqa: E501


        :return: The trigger of this Pipeline.  # noqa: E501
        :rtype: PipelineTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Pipeline.


        :param trigger: The trigger of this Pipeline.  # noqa: E501
        :type: PipelineTrigger
        """

        self._trigger = trigger

    @property
    def uuid(self):
        """Gets the uuid of this Pipeline.  # noqa: E501

        The UUID identifying the pipeline.  # noqa: E501

        :return: The uuid of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Pipeline.

        The UUID identifying the pipeline.  # noqa: E501

        :param uuid: The uuid of this Pipeline.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

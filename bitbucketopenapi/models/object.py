# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Object(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str'
    }

    attribute_map = {
        'type': 'type'
    }

    discriminator_value_class_map = {
        'pipeline_build_number': 'PipelineBuildNumber',
        'pipelines_stg_west_pipeline_step': 'PipelinesStgWestPipelineStep',
        'project': 'Project',
        'participant': 'Participant',
        'pipeline_ssh_key_pair': 'PipelineSshKeyPair',
        'author': 'Author',
        'group': 'Group',
        'pipeline_trigger': 'PipelineTrigger',
        'pipeline_known_host': 'PipelineKnownHost',
        'pipelines_config': 'PipelinesConfig',
        'team': 'Team',
        'pipeline_state_completed_result': 'PipelineStateCompletedResult',
        'deployment_release': 'DeploymentRelease',
        'repository': 'Repository',
        'pipeline_target': 'PipelineTarget',
        'pipeline_trigger_push': 'PipelineTriggerPush',
        'issue': 'Issue',
        'deploy_key': 'DeployKey',
        'deployment': 'Deployment',
        'snippet_comment': 'SnippetComment',
        'version': 'Version',
        'pipeline_variable': 'PipelineVariable',
        'milestone': 'Milestone',
        'snippet': 'Snippet',
        'pullrequest': 'Pullrequest',
        'deployment_environment': 'DeploymentEnvironment',
        'component': 'Component',
        'pipeline_state_in_progress_stage': 'PipelineStateInProgressStage',
        'branching_model': 'BranchingModel',
        'pipeline_state': 'PipelineState',
        'account': 'Account',
        'pipeline_step_error': 'PipelineStepError',
        'deployment_state': 'DeploymentState',
        'pipeline_trigger_manual': 'PipelineTriggerManual',
        'branchrestriction': 'Branchrestriction',
        'pipeline_step_state': 'PipelineStepState',
        'pipeline_error': 'PipelineError',
        'pipeline_ssh_public_key': 'PipelineSshPublicKey',
        'pipeline': 'Pipeline',
        'ssh_key': 'SshKey',
        'commitstatus': 'Commitstatus',
        'pipelines_ddev_pipeline_step': 'PipelinesDdevPipelineStep',
        'pipeline_schedule_execution': 'PipelineScheduleExecution',
        'pipeline_schedule': 'PipelineSchedule',
        'branching_model_settings': 'BranchingModelSettings',
        'pipeline_selector': 'PipelineSelector',
        'deployment_state_completed_status': 'DeploymentStateCompletedStatus',
        'comment': 'Comment',
        'pipeline_step': 'PipelineStep',
        'webhook_subscription': 'WebhookSubscription',
        'pipeline_step_state_completed_result': 'PipelineStepStateCompletedResult',
        'base_commit': 'BaseCommit',
        'issue_attachment': 'IssueAttachment'
    }

    def __init__(self, type=None):  # noqa: E501
        """Object - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self.discriminator = 'type'

        self.type = type

    @property
    def type(self):
        """Gets the type of this Object.  # noqa: E501


        :return: The type of this Object.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Object.


        :param type: The type of this Object.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Object):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

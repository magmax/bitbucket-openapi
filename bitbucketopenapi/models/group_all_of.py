# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GroupAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'full_slug': 'str',
        'links': 'GroupAllOfLinks',
        'members': 'int',
        'name': 'str',
        'owner': 'Account',
        'slug': 'str'
    }

    attribute_map = {
        'full_slug': 'full_slug',
        'links': 'links',
        'members': 'members',
        'name': 'name',
        'owner': 'owner',
        'slug': 'slug'
    }

    def __init__(self, full_slug=None, links=None, members=None, name=None, owner=None, slug=None):  # noqa: E501
        """GroupAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._full_slug = None
        self._links = None
        self._members = None
        self._name = None
        self._owner = None
        self._slug = None
        self.discriminator = None

        if full_slug is not None:
            self.full_slug = full_slug
        if links is not None:
            self.links = links
        if members is not None:
            self.members = members
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if slug is not None:
            self.slug = slug

    @property
    def full_slug(self):
        """Gets the full_slug of this GroupAllOf.  # noqa: E501

        The concatenation of the owner's username and the group's slug, separated with a colon (e.g. `acme:developers`)   # noqa: E501

        :return: The full_slug of this GroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._full_slug

    @full_slug.setter
    def full_slug(self, full_slug):
        """Sets the full_slug of this GroupAllOf.

        The concatenation of the owner's username and the group's slug, separated with a colon (e.g. `acme:developers`)   # noqa: E501

        :param full_slug: The full_slug of this GroupAllOf.  # noqa: E501
        :type: str
        """

        self._full_slug = full_slug

    @property
    def links(self):
        """Gets the links of this GroupAllOf.  # noqa: E501


        :return: The links of this GroupAllOf.  # noqa: E501
        :rtype: GroupAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GroupAllOf.


        :param links: The links of this GroupAllOf.  # noqa: E501
        :type: GroupAllOfLinks
        """

        self._links = links

    @property
    def members(self):
        """Gets the members of this GroupAllOf.  # noqa: E501

        The number of members in this group  # noqa: E501

        :return: The members of this GroupAllOf.  # noqa: E501
        :rtype: int
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this GroupAllOf.

        The number of members in this group  # noqa: E501

        :param members: The members of this GroupAllOf.  # noqa: E501
        :type: int
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this GroupAllOf.  # noqa: E501


        :return: The name of this GroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupAllOf.


        :param name: The name of this GroupAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this GroupAllOf.  # noqa: E501


        :return: The owner of this GroupAllOf.  # noqa: E501
        :rtype: Account
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GroupAllOf.


        :param owner: The owner of this GroupAllOf.  # noqa: E501
        :type: Account
        """

        self._owner = owner

    @property
    def slug(self):
        """Gets the slug of this GroupAllOf.  # noqa: E501

        The \"sluggified\" version of the group's name. This contains only ASCII characters and can therefore be slightly different than the name  # noqa: E501

        :return: The slug of this GroupAllOf.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GroupAllOf.

        The \"sluggified\" version of the group's name. This contains only ASCII characters and can therefore be slightly different than the name  # noqa: E501

        :param slug: The slug of this GroupAllOf.  # noqa: E501
        :type: str
        """

        self._slug = slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PullrequestAllOfLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activity': 'AccountAllOfLinksAvatar',
        'approve': 'AccountAllOfLinksAvatar',
        'comments': 'AccountAllOfLinksAvatar',
        'commits': 'AccountAllOfLinksAvatar',
        'decline': 'AccountAllOfLinksAvatar',
        'diff': 'AccountAllOfLinksAvatar',
        'diffstat': 'AccountAllOfLinksAvatar',
        'html': 'AccountAllOfLinksAvatar',
        'merge': 'AccountAllOfLinksAvatar',
        '_self': 'AccountAllOfLinksAvatar'
    }

    attribute_map = {
        'activity': 'activity',
        'approve': 'approve',
        'comments': 'comments',
        'commits': 'commits',
        'decline': 'decline',
        'diff': 'diff',
        'diffstat': 'diffstat',
        'html': 'html',
        'merge': 'merge',
        '_self': 'self'
    }

    def __init__(self, activity=None, approve=None, comments=None, commits=None, decline=None, diff=None, diffstat=None, html=None, merge=None, _self=None):  # noqa: E501
        """PullrequestAllOfLinks - a model defined in OpenAPI"""  # noqa: E501

        self._activity = None
        self._approve = None
        self._comments = None
        self._commits = None
        self._decline = None
        self._diff = None
        self._diffstat = None
        self._html = None
        self._merge = None
        self.__self = None
        self.discriminator = None

        if activity is not None:
            self.activity = activity
        if approve is not None:
            self.approve = approve
        if comments is not None:
            self.comments = comments
        if commits is not None:
            self.commits = commits
        if decline is not None:
            self.decline = decline
        if diff is not None:
            self.diff = diff
        if diffstat is not None:
            self.diffstat = diffstat
        if html is not None:
            self.html = html
        if merge is not None:
            self.merge = merge
        if _self is not None:
            self._self = _self

    @property
    def activity(self):
        """Gets the activity of this PullrequestAllOfLinks.  # noqa: E501


        :return: The activity of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this PullrequestAllOfLinks.


        :param activity: The activity of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._activity = activity

    @property
    def approve(self):
        """Gets the approve of this PullrequestAllOfLinks.  # noqa: E501


        :return: The approve of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._approve

    @approve.setter
    def approve(self, approve):
        """Sets the approve of this PullrequestAllOfLinks.


        :param approve: The approve of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._approve = approve

    @property
    def comments(self):
        """Gets the comments of this PullrequestAllOfLinks.  # noqa: E501


        :return: The comments of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PullrequestAllOfLinks.


        :param comments: The comments of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._comments = comments

    @property
    def commits(self):
        """Gets the commits of this PullrequestAllOfLinks.  # noqa: E501


        :return: The commits of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this PullrequestAllOfLinks.


        :param commits: The commits of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._commits = commits

    @property
    def decline(self):
        """Gets the decline of this PullrequestAllOfLinks.  # noqa: E501


        :return: The decline of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._decline

    @decline.setter
    def decline(self, decline):
        """Sets the decline of this PullrequestAllOfLinks.


        :param decline: The decline of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._decline = decline

    @property
    def diff(self):
        """Gets the diff of this PullrequestAllOfLinks.  # noqa: E501


        :return: The diff of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this PullrequestAllOfLinks.


        :param diff: The diff of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._diff = diff

    @property
    def diffstat(self):
        """Gets the diffstat of this PullrequestAllOfLinks.  # noqa: E501


        :return: The diffstat of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._diffstat

    @diffstat.setter
    def diffstat(self, diffstat):
        """Sets the diffstat of this PullrequestAllOfLinks.


        :param diffstat: The diffstat of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._diffstat = diffstat

    @property
    def html(self):
        """Gets the html of this PullrequestAllOfLinks.  # noqa: E501


        :return: The html of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this PullrequestAllOfLinks.


        :param html: The html of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._html = html

    @property
    def merge(self):
        """Gets the merge of this PullrequestAllOfLinks.  # noqa: E501


        :return: The merge of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._merge

    @merge.setter
    def merge(self, merge):
        """Sets the merge of this PullrequestAllOfLinks.


        :param merge: The merge of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._merge = merge

    @property
    def _self(self):
        """Gets the _self of this PullrequestAllOfLinks.  # noqa: E501


        :return: The _self of this PullrequestAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PullrequestAllOfLinks.


        :param _self: The _self of this PullrequestAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PullrequestAllOfLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

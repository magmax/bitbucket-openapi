# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ParticipantAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'approved': 'bool',
        'participated_on': 'datetime',
        'role': 'str',
        'user': 'User'
    }

    attribute_map = {
        'approved': 'approved',
        'participated_on': 'participated_on',
        'role': 'role',
        'user': 'user'
    }

    def __init__(self, approved=None, participated_on=None, role=None, user=None):  # noqa: E501
        """ParticipantAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._approved = None
        self._participated_on = None
        self._role = None
        self._user = None
        self.discriminator = None

        if approved is not None:
            self.approved = approved
        if participated_on is not None:
            self.participated_on = participated_on
        if role is not None:
            self.role = role
        if user is not None:
            self.user = user

    @property
    def approved(self):
        """Gets the approved of this ParticipantAllOf.  # noqa: E501


        :return: The approved of this ParticipantAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this ParticipantAllOf.


        :param approved: The approved of this ParticipantAllOf.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def participated_on(self):
        """Gets the participated_on of this ParticipantAllOf.  # noqa: E501

        The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.  # noqa: E501

        :return: The participated_on of this ParticipantAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._participated_on

    @participated_on.setter
    def participated_on(self, participated_on):
        """Sets the participated_on of this ParticipantAllOf.

        The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.  # noqa: E501

        :param participated_on: The participated_on of this ParticipantAllOf.  # noqa: E501
        :type: datetime
        """

        self._participated_on = participated_on

    @property
    def role(self):
        """Gets the role of this ParticipantAllOf.  # noqa: E501


        :return: The role of this ParticipantAllOf.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ParticipantAllOf.


        :param role: The role of this ParticipantAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["PARTICIPANT", "REVIEWER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user(self):
        """Gets the user of this ParticipantAllOf.  # noqa: E501


        :return: The user of this ParticipantAllOf.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ParticipantAllOf.


        :param user: The user of this ParticipantAllOf.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticipantAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

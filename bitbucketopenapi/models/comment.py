# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Comment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'BaseCommitAllOfSummary',
        'created_on': 'datetime',
        'deleted': 'bool',
        'id': 'int',
        'inline': 'CommentAllOfInline',
        'links': 'CommentAllOfLinks',
        'parent': 'Comment',
        'updated_on': 'datetime',
        'user': 'User'
    }

    attribute_map = {
        'content': 'content',
        'created_on': 'created_on',
        'deleted': 'deleted',
        'id': 'id',
        'inline': 'inline',
        'links': 'links',
        'parent': 'parent',
        'updated_on': 'updated_on',
        'user': 'user'
    }

    def __init__(self, content=None, created_on=None, deleted=None, id=None, inline=None, links=None, parent=None, updated_on=None, user=None):  # noqa: E501
        """Comment - a model defined in OpenAPI"""  # noqa: E501

        self._content = None
        self._created_on = None
        self._deleted = None
        self._id = None
        self._inline = None
        self._links = None
        self._parent = None
        self._updated_on = None
        self._user = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if created_on is not None:
            self.created_on = created_on
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if inline is not None:
            self.inline = inline
        if links is not None:
            self.links = links
        if parent is not None:
            self.parent = parent
        if updated_on is not None:
            self.updated_on = updated_on
        if user is not None:
            self.user = user

    @property
    def content(self):
        """Gets the content of this Comment.  # noqa: E501


        :return: The content of this Comment.  # noqa: E501
        :rtype: BaseCommitAllOfSummary
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.


        :param content: The content of this Comment.  # noqa: E501
        :type: BaseCommitAllOfSummary
        """

        self._content = content

    @property
    def created_on(self):
        """Gets the created_on of this Comment.  # noqa: E501


        :return: The created_on of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Comment.


        :param created_on: The created_on of this Comment.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def deleted(self):
        """Gets the deleted of this Comment.  # noqa: E501


        :return: The deleted of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Comment.


        :param deleted: The deleted of this Comment.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inline(self):
        """Gets the inline of this Comment.  # noqa: E501


        :return: The inline of this Comment.  # noqa: E501
        :rtype: CommentAllOfInline
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """Sets the inline of this Comment.


        :param inline: The inline of this Comment.  # noqa: E501
        :type: CommentAllOfInline
        """

        self._inline = inline

    @property
    def links(self):
        """Gets the links of this Comment.  # noqa: E501


        :return: The links of this Comment.  # noqa: E501
        :rtype: CommentAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Comment.


        :param links: The links of this Comment.  # noqa: E501
        :type: CommentAllOfLinks
        """

        self._links = links

    @property
    def parent(self):
        """Gets the parent of this Comment.  # noqa: E501


        :return: The parent of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Comment.


        :param parent: The parent of this Comment.  # noqa: E501
        :type: Comment
        """

        self._parent = parent

    @property
    def updated_on(self):
        """Gets the updated_on of this Comment.  # noqa: E501


        :return: The updated_on of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Comment.


        :param updated_on: The updated_on of this Comment.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def user(self):
        """Gets the user of this Comment.  # noqa: E501


        :return: The user of this Comment.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

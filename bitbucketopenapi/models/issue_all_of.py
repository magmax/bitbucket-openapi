# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IssueAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assignee': 'User',
        'component': 'Component',
        'content': 'BaseCommitAllOfSummary',
        'created_on': 'datetime',
        'edited_on': 'datetime',
        'id': 'int',
        'kind': 'str',
        'links': 'IssueAllOfLinks',
        'milestone': 'Milestone',
        'priority': 'str',
        'reporter': 'User',
        'repository': 'Repository',
        'state': 'str',
        'title': 'str',
        'updated_on': 'datetime',
        'version': 'Version',
        'votes': 'int'
    }

    attribute_map = {
        'assignee': 'assignee',
        'component': 'component',
        'content': 'content',
        'created_on': 'created_on',
        'edited_on': 'edited_on',
        'id': 'id',
        'kind': 'kind',
        'links': 'links',
        'milestone': 'milestone',
        'priority': 'priority',
        'reporter': 'reporter',
        'repository': 'repository',
        'state': 'state',
        'title': 'title',
        'updated_on': 'updated_on',
        'version': 'version',
        'votes': 'votes'
    }

    def __init__(self, assignee=None, component=None, content=None, created_on=None, edited_on=None, id=None, kind=None, links=None, milestone=None, priority=None, reporter=None, repository=None, state=None, title=None, updated_on=None, version=None, votes=None):  # noqa: E501
        """IssueAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._assignee = None
        self._component = None
        self._content = None
        self._created_on = None
        self._edited_on = None
        self._id = None
        self._kind = None
        self._links = None
        self._milestone = None
        self._priority = None
        self._reporter = None
        self._repository = None
        self._state = None
        self._title = None
        self._updated_on = None
        self._version = None
        self._votes = None
        self.discriminator = None

        if assignee is not None:
            self.assignee = assignee
        if component is not None:
            self.component = component
        if content is not None:
            self.content = content
        if created_on is not None:
            self.created_on = created_on
        if edited_on is not None:
            self.edited_on = edited_on
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind
        if links is not None:
            self.links = links
        if milestone is not None:
            self.milestone = milestone
        if priority is not None:
            self.priority = priority
        if reporter is not None:
            self.reporter = reporter
        if repository is not None:
            self.repository = repository
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if updated_on is not None:
            self.updated_on = updated_on
        if version is not None:
            self.version = version
        if votes is not None:
            self.votes = votes

    @property
    def assignee(self):
        """Gets the assignee of this IssueAllOf.  # noqa: E501


        :return: The assignee of this IssueAllOf.  # noqa: E501
        :rtype: User
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this IssueAllOf.


        :param assignee: The assignee of this IssueAllOf.  # noqa: E501
        :type: User
        """

        self._assignee = assignee

    @property
    def component(self):
        """Gets the component of this IssueAllOf.  # noqa: E501


        :return: The component of this IssueAllOf.  # noqa: E501
        :rtype: Component
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this IssueAllOf.


        :param component: The component of this IssueAllOf.  # noqa: E501
        :type: Component
        """

        self._component = component

    @property
    def content(self):
        """Gets the content of this IssueAllOf.  # noqa: E501


        :return: The content of this IssueAllOf.  # noqa: E501
        :rtype: BaseCommitAllOfSummary
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this IssueAllOf.


        :param content: The content of this IssueAllOf.  # noqa: E501
        :type: BaseCommitAllOfSummary
        """

        self._content = content

    @property
    def created_on(self):
        """Gets the created_on of this IssueAllOf.  # noqa: E501


        :return: The created_on of this IssueAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this IssueAllOf.


        :param created_on: The created_on of this IssueAllOf.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def edited_on(self):
        """Gets the edited_on of this IssueAllOf.  # noqa: E501


        :return: The edited_on of this IssueAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._edited_on

    @edited_on.setter
    def edited_on(self, edited_on):
        """Sets the edited_on of this IssueAllOf.


        :param edited_on: The edited_on of this IssueAllOf.  # noqa: E501
        :type: datetime
        """

        self._edited_on = edited_on

    @property
    def id(self):
        """Gets the id of this IssueAllOf.  # noqa: E501


        :return: The id of this IssueAllOf.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueAllOf.


        :param id: The id of this IssueAllOf.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this IssueAllOf.  # noqa: E501


        :return: The kind of this IssueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IssueAllOf.


        :param kind: The kind of this IssueAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["bug", "enhancement", "proposal", "task"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def links(self):
        """Gets the links of this IssueAllOf.  # noqa: E501


        :return: The links of this IssueAllOf.  # noqa: E501
        :rtype: IssueAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IssueAllOf.


        :param links: The links of this IssueAllOf.  # noqa: E501
        :type: IssueAllOfLinks
        """

        self._links = links

    @property
    def milestone(self):
        """Gets the milestone of this IssueAllOf.  # noqa: E501


        :return: The milestone of this IssueAllOf.  # noqa: E501
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this IssueAllOf.


        :param milestone: The milestone of this IssueAllOf.  # noqa: E501
        :type: Milestone
        """

        self._milestone = milestone

    @property
    def priority(self):
        """Gets the priority of this IssueAllOf.  # noqa: E501


        :return: The priority of this IssueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this IssueAllOf.


        :param priority: The priority of this IssueAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["trivial", "minor", "major", "critical", "blocker"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def reporter(self):
        """Gets the reporter of this IssueAllOf.  # noqa: E501


        :return: The reporter of this IssueAllOf.  # noqa: E501
        :rtype: User
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this IssueAllOf.


        :param reporter: The reporter of this IssueAllOf.  # noqa: E501
        :type: User
        """

        self._reporter = reporter

    @property
    def repository(self):
        """Gets the repository of this IssueAllOf.  # noqa: E501


        :return: The repository of this IssueAllOf.  # noqa: E501
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this IssueAllOf.


        :param repository: The repository of this IssueAllOf.  # noqa: E501
        :type: Repository
        """

        self._repository = repository

    @property
    def state(self):
        """Gets the state of this IssueAllOf.  # noqa: E501


        :return: The state of this IssueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssueAllOf.


        :param state: The state of this IssueAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "open", "resolved", "on hold", "invalid", "duplicate", "wontfix", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this IssueAllOf.  # noqa: E501


        :return: The title of this IssueAllOf.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueAllOf.


        :param title: The title of this IssueAllOf.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_on(self):
        """Gets the updated_on of this IssueAllOf.  # noqa: E501


        :return: The updated_on of this IssueAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this IssueAllOf.


        :param updated_on: The updated_on of this IssueAllOf.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def version(self):
        """Gets the version of this IssueAllOf.  # noqa: E501


        :return: The version of this IssueAllOf.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IssueAllOf.


        :param version: The version of this IssueAllOf.  # noqa: E501
        :type: Version
        """

        self._version = version

    @property
    def votes(self):
        """Gets the votes of this IssueAllOf.  # noqa: E501


        :return: The votes of this IssueAllOf.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this IssueAllOf.


        :param votes: The votes of this IssueAllOf.  # noqa: E501
        :type: int
        """

        self._votes = votes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

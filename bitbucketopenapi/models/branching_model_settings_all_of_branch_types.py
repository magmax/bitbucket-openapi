# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BranchingModelSettingsAllOfBranchTypes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'kind': 'str',
        'prefix': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'kind': 'kind',
        'prefix': 'prefix'
    }

    def __init__(self, enabled=None, kind=None, prefix=None):  # noqa: E501
        """BranchingModelSettingsAllOfBranchTypes - a model defined in OpenAPI"""  # noqa: E501

        self._enabled = None
        self._kind = None
        self._prefix = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        self.kind = kind
        if prefix is not None:
            self.prefix = prefix

    @property
    def enabled(self):
        """Gets the enabled of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501

        Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.  # noqa: E501

        :return: The enabled of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BranchingModelSettingsAllOfBranchTypes.

        Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.  # noqa: E501

        :param enabled: The enabled of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def kind(self):
        """Gets the kind of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501

        The kind of the branch type.  # noqa: E501

        :return: The kind of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BranchingModelSettingsAllOfBranchTypes.

        The kind of the branch type.  # noqa: E501

        :param kind: The kind of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["feature", "bugfix", "release", "hotfix"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def prefix(self):
        """Gets the prefix of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501

        The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.  # noqa: E501

        :return: The prefix of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BranchingModelSettingsAllOfBranchTypes.

        The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.  # noqa: E501

        :param prefix: The prefix of this BranchingModelSettingsAllOfBranchTypes.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BranchingModelSettingsAllOfBranchTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

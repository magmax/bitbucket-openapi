# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_on': 'datetime',
        'description': 'str',
        'is_private': 'bool',
        'key': 'str',
        'links': 'ProjectAllOfLinks',
        'name': 'str',
        'owner': 'Team',
        'updated_on': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'created_on': 'created_on',
        'description': 'description',
        'is_private': 'is_private',
        'key': 'key',
        'links': 'links',
        'name': 'name',
        'owner': 'owner',
        'updated_on': 'updated_on',
        'uuid': 'uuid'
    }

    def __init__(self, created_on=None, description=None, is_private=None, key=None, links=None, name=None, owner=None, updated_on=None, uuid=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501

        self._created_on = None
        self._description = None
        self._is_private = None
        self._key = None
        self._links = None
        self._name = None
        self._owner = None
        self._updated_on = None
        self._uuid = None
        self.discriminator = None

        if created_on is not None:
            self.created_on = created_on
        if description is not None:
            self.description = description
        if is_private is not None:
            self.is_private = is_private
        if key is not None:
            self.key = key
        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if updated_on is not None:
            self.updated_on = updated_on
        if uuid is not None:
            self.uuid = uuid

    @property
    def created_on(self):
        """Gets the created_on of this Project.  # noqa: E501


        :return: The created_on of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Project.


        :param created_on: The created_on of this Project.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_private(self):
        """Gets the is_private of this Project.  # noqa: E501

         Indicates whether the project is publicly accessible, or whether it is private to the team and consequently only visible to team members. Note that private projects cannot contain public repositories.  # noqa: E501

        :return: The is_private of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Project.

         Indicates whether the project is publicly accessible, or whether it is private to the team and consequently only visible to team members. Note that private projects cannot contain public repositories.  # noqa: E501

        :param is_private: The is_private of this Project.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def key(self):
        """Gets the key of this Project.  # noqa: E501

        The project's key.  # noqa: E501

        :return: The key of this Project.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Project.

        The project's key.  # noqa: E501

        :param key: The key of this Project.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def links(self):
        """Gets the links of this Project.  # noqa: E501


        :return: The links of this Project.  # noqa: E501
        :rtype: ProjectAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Project.


        :param links: The links of this Project.  # noqa: E501
        :type: ProjectAllOfLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        The name of the project.  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Project.  # noqa: E501


        :return: The owner of this Project.  # noqa: E501
        :rtype: Team
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Project.


        :param owner: The owner of this Project.  # noqa: E501
        :type: Team
        """

        self._owner = owner

    @property
    def updated_on(self):
        """Gets the updated_on of this Project.  # noqa: E501


        :return: The updated_on of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Project.


        :param updated_on: The updated_on of this Project.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501

        The project's immutable id.  # noqa: E501

        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.

        The project's immutable id.  # noqa: E501

        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PipelineImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'name': 'str',
        'password': 'str',
        'username': 'str'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'password': 'password',
        'username': 'username'
    }

    def __init__(self, email=None, name=None, password=None, username=None):  # noqa: E501
        """PipelineImage - a model defined in OpenAPI"""  # noqa: E501

        self._email = None
        self._name = None
        self._password = None
        self._username = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if username is not None:
            self.username = username

    @property
    def email(self):
        """Gets the email of this PipelineImage.  # noqa: E501

        The email needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :return: The email of this PipelineImage.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PipelineImage.

        The email needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :param email: The email of this PipelineImage.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this PipelineImage.  # noqa: E501

        The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.  # noqa: E501

        :return: The name of this PipelineImage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineImage.

        The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.  # noqa: E501

        :param name: The name of this PipelineImage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this PipelineImage.  # noqa: E501

        The password needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :return: The password of this PipelineImage.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PipelineImage.

        The password needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :param password: The password of this PipelineImage.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this PipelineImage.  # noqa: E501

        The username needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :return: The username of this PipelineImage.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PipelineImage.

        The username needed to authenticate with the Docker registry. Only required when using a private Docker image.  # noqa: E501

        :param username: The username of this PipelineImage.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineImage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

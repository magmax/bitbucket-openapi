# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BranchingModelSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'branch_types': 'list[BranchingModelSettingsAllOfBranchTypes]',
        'development': 'BranchingModelSettingsAllOfDevelopment',
        'links': 'BranchingModelSettingsAllOfLinks',
        'production': 'BranchingModelSettingsAllOfProduction'
    }

    attribute_map = {
        'branch_types': 'branch_types',
        'development': 'development',
        'links': 'links',
        'production': 'production'
    }

    def __init__(self, branch_types=None, development=None, links=None, production=None):  # noqa: E501
        """BranchingModelSettings - a model defined in OpenAPI"""  # noqa: E501

        self._branch_types = None
        self._development = None
        self._links = None
        self._production = None
        self.discriminator = None

        if branch_types is not None:
            self.branch_types = branch_types
        if development is not None:
            self.development = development
        if links is not None:
            self.links = links
        if production is not None:
            self.production = production

    @property
    def branch_types(self):
        """Gets the branch_types of this BranchingModelSettings.  # noqa: E501


        :return: The branch_types of this BranchingModelSettings.  # noqa: E501
        :rtype: list[BranchingModelSettingsAllOfBranchTypes]
        """
        return self._branch_types

    @branch_types.setter
    def branch_types(self, branch_types):
        """Sets the branch_types of this BranchingModelSettings.


        :param branch_types: The branch_types of this BranchingModelSettings.  # noqa: E501
        :type: list[BranchingModelSettingsAllOfBranchTypes]
        """

        self._branch_types = branch_types

    @property
    def development(self):
        """Gets the development of this BranchingModelSettings.  # noqa: E501


        :return: The development of this BranchingModelSettings.  # noqa: E501
        :rtype: BranchingModelSettingsAllOfDevelopment
        """
        return self._development

    @development.setter
    def development(self, development):
        """Sets the development of this BranchingModelSettings.


        :param development: The development of this BranchingModelSettings.  # noqa: E501
        :type: BranchingModelSettingsAllOfDevelopment
        """

        self._development = development

    @property
    def links(self):
        """Gets the links of this BranchingModelSettings.  # noqa: E501


        :return: The links of this BranchingModelSettings.  # noqa: E501
        :rtype: BranchingModelSettingsAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BranchingModelSettings.


        :param links: The links of this BranchingModelSettings.  # noqa: E501
        :type: BranchingModelSettingsAllOfLinks
        """

        self._links = links

    @property
    def production(self):
        """Gets the production of this BranchingModelSettings.  # noqa: E501


        :return: The production of this BranchingModelSettings.  # noqa: E501
        :rtype: BranchingModelSettingsAllOfProduction
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this BranchingModelSettings.


        :param production: The production of this BranchingModelSettings.  # noqa: E501
        :type: BranchingModelSettingsAllOfProduction
        """

        self._production = production

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BranchingModelSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

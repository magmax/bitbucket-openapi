# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'account_status': 'str',
        'created_on': 'datetime',
        'display_name': 'str',
        'has_2fa_enabled': 'bool',
        'links': 'AccountAllOfLinks',
        'nickname': 'str',
        'username': 'str',
        'uuid': 'str',
        'website': 'str',
        'account_id': 'str',
        'is_staff': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'account_status': 'account_status',
        'created_on': 'created_on',
        'display_name': 'display_name',
        'has_2fa_enabled': 'has_2fa_enabled',
        'links': 'links',
        'nickname': 'nickname',
        'username': 'username',
        'uuid': 'uuid',
        'website': 'website',
        'account_id': 'account_id',
        'is_staff': 'is_staff'
    }

    def __init__(self, type=None, account_status=None, created_on=None, display_name=None, has_2fa_enabled=None, links=None, nickname=None, username=None, uuid=None, website=None, account_id=None, is_staff=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._account_status = None
        self._created_on = None
        self._display_name = None
        self._has_2fa_enabled = None
        self._links = None
        self._nickname = None
        self._username = None
        self._uuid = None
        self._website = None
        self._account_id = None
        self._is_staff = None
        self.discriminator = None

        self.type = type
        if account_status is not None:
            self.account_status = account_status
        if created_on is not None:
            self.created_on = created_on
        if display_name is not None:
            self.display_name = display_name
        if has_2fa_enabled is not None:
            self.has_2fa_enabled = has_2fa_enabled
        if links is not None:
            self.links = links
        if nickname is not None:
            self.nickname = nickname
        if username is not None:
            self.username = username
        if uuid is not None:
            self.uuid = uuid
        if website is not None:
            self.website = website
        if account_id is not None:
            self.account_id = account_id
        if is_staff is not None:
            self.is_staff = is_staff

    @property
    def type(self):
        """Gets the type of this User.  # noqa: E501


        :return: The type of this User.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.


        :param type: The type of this User.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def account_status(self):
        """Gets the account_status of this User.  # noqa: E501

        The status of the account. Currently the only possible value is \"active\", but more values may be added in the future.  # noqa: E501

        :return: The account_status of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this User.

        The status of the account. Currently the only possible value is \"active\", but more values may be added in the future.  # noqa: E501

        :param account_status: The account_status of this User.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def created_on(self):
        """Gets the created_on of this User.  # noqa: E501


        :return: The created_on of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this User.


        :param created_on: The created_on of this User.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501


        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def has_2fa_enabled(self):
        """Gets the has_2fa_enabled of this User.  # noqa: E501


        :return: The has_2fa_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._has_2fa_enabled

    @has_2fa_enabled.setter
    def has_2fa_enabled(self, has_2fa_enabled):
        """Sets the has_2fa_enabled of this User.


        :param has_2fa_enabled: The has_2fa_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._has_2fa_enabled = has_2fa_enabled

    @property
    def links(self):
        """Gets the links of this User.  # noqa: E501


        :return: The links of this User.  # noqa: E501
        :rtype: AccountAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this User.


        :param links: The links of this User.  # noqa: E501
        :type: AccountAllOfLinks
        """

        self._links = links

    @property
    def nickname(self):
        """Gets the nickname of this User.  # noqa: E501

        Account name defined by the owner. Should be used instead of the \"username\" field. Note that \"nickname\" cannot be used in place of \"username\" in URLs and queries, as \"nickname\" is not guaranteed to be unique.  # noqa: E501

        :return: The nickname of this User.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.

        Account name defined by the owner. Should be used instead of the \"username\" field. Note that \"nickname\" cannot be used in place of \"username\" in URLs and queries, as \"nickname\" is not guaranteed to be unique.  # noqa: E501

        :param nickname: The nickname of this User.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if username is not None and not re.search(r'^[a-zA-Z0-9_\-]+$', username):  # noqa: E501
            raise ValueError(r"Invalid value for `username`, must be a follow pattern or equal to `/^[a-zA-Z0-9_\-]+$/`")  # noqa: E501

        self._username = username

    @property
    def uuid(self):
        """Gets the uuid of this User.  # noqa: E501


        :return: The uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.


        :param uuid: The uuid of this User.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def website(self):
        """Gets the website of this User.  # noqa: E501


        :return: The website of this User.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this User.


        :param website: The website of this User.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def account_id(self):
        """Gets the account_id of this User.  # noqa: E501

        The user's Atlassian account ID.  # noqa: E501

        :return: The account_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        The user's Atlassian account ID.  # noqa: E501

        :param account_id: The account_id of this User.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def is_staff(self):
        """Gets the is_staff of this User.  # noqa: E501


        :return: The is_staff of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this User.


        :param is_staff: The is_staff of this User.  # noqa: E501
        :type: bool
        """

        self._is_staff = is_staff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

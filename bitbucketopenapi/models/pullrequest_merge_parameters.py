# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PullrequestMergeParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'close_source_branch': 'bool',
        'merge_strategy': 'str',
        'message': 'str',
        'type': 'str'
    }

    attribute_map = {
        'close_source_branch': 'close_source_branch',
        'merge_strategy': 'merge_strategy',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, close_source_branch=None, merge_strategy='merge_commit', message=None, type=None):  # noqa: E501
        """PullrequestMergeParameters - a model defined in OpenAPI"""  # noqa: E501

        self._close_source_branch = None
        self._merge_strategy = None
        self._message = None
        self._type = None
        self.discriminator = None

        if close_source_branch is not None:
            self.close_source_branch = close_source_branch
        if merge_strategy is not None:
            self.merge_strategy = merge_strategy
        if message is not None:
            self.message = message
        self.type = type

    @property
    def close_source_branch(self):
        """Gets the close_source_branch of this PullrequestMergeParameters.  # noqa: E501

        Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False  # noqa: E501

        :return: The close_source_branch of this PullrequestMergeParameters.  # noqa: E501
        :rtype: bool
        """
        return self._close_source_branch

    @close_source_branch.setter
    def close_source_branch(self, close_source_branch):
        """Sets the close_source_branch of this PullrequestMergeParameters.

        Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False  # noqa: E501

        :param close_source_branch: The close_source_branch of this PullrequestMergeParameters.  # noqa: E501
        :type: bool
        """

        self._close_source_branch = close_source_branch

    @property
    def merge_strategy(self):
        """Gets the merge_strategy of this PullrequestMergeParameters.  # noqa: E501

        The merge strategy that will be used to merge the pull request.  # noqa: E501

        :return: The merge_strategy of this PullrequestMergeParameters.  # noqa: E501
        :rtype: str
        """
        return self._merge_strategy

    @merge_strategy.setter
    def merge_strategy(self, merge_strategy):
        """Sets the merge_strategy of this PullrequestMergeParameters.

        The merge strategy that will be used to merge the pull request.  # noqa: E501

        :param merge_strategy: The merge_strategy of this PullrequestMergeParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["merge_commit", "squash", "fast_forward"]  # noqa: E501
        if merge_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(merge_strategy, allowed_values)
            )

        self._merge_strategy = merge_strategy

    @property
    def message(self):
        """Gets the message of this PullrequestMergeParameters.  # noqa: E501

        The commit message that will be used on the resulting commit.  # noqa: E501

        :return: The message of this PullrequestMergeParameters.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PullrequestMergeParameters.

        The commit message that will be used on the resulting commit.  # noqa: E501

        :param message: The message of this PullrequestMergeParameters.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this PullrequestMergeParameters.  # noqa: E501


        :return: The type of this PullrequestMergeParameters.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PullrequestMergeParameters.


        :param type: The type of this PullrequestMergeParameters.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PullrequestMergeParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

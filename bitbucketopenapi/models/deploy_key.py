# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeployKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'added_on': 'datetime',
        'comment': 'str',
        'key': 'str',
        'label': 'str',
        'last_used': 'datetime',
        'links': 'BranchingModelSettingsAllOfLinks',
        'owner': 'Account',
        'repository': 'Repository'
    }

    attribute_map = {
        'added_on': 'added_on',
        'comment': 'comment',
        'key': 'key',
        'label': 'label',
        'last_used': 'last_used',
        'links': 'links',
        'owner': 'owner',
        'repository': 'repository'
    }

    def __init__(self, added_on=None, comment=None, key=None, label=None, last_used=None, links=None, owner=None, repository=None):  # noqa: E501
        """DeployKey - a model defined in OpenAPI"""  # noqa: E501

        self._added_on = None
        self._comment = None
        self._key = None
        self._label = None
        self._last_used = None
        self._links = None
        self._owner = None
        self._repository = None
        self.discriminator = None

        if added_on is not None:
            self.added_on = added_on
        if comment is not None:
            self.comment = comment
        if key is not None:
            self.key = key
        if label is not None:
            self.label = label
        if last_used is not None:
            self.last_used = last_used
        if links is not None:
            self.links = links
        if owner is not None:
            self.owner = owner
        if repository is not None:
            self.repository = repository

    @property
    def added_on(self):
        """Gets the added_on of this DeployKey.  # noqa: E501


        :return: The added_on of this DeployKey.  # noqa: E501
        :rtype: datetime
        """
        return self._added_on

    @added_on.setter
    def added_on(self, added_on):
        """Sets the added_on of this DeployKey.


        :param added_on: The added_on of this DeployKey.  # noqa: E501
        :type: datetime
        """

        self._added_on = added_on

    @property
    def comment(self):
        """Gets the comment of this DeployKey.  # noqa: E501

        The comment parsed from the deploy key (if present)  # noqa: E501

        :return: The comment of this DeployKey.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DeployKey.

        The comment parsed from the deploy key (if present)  # noqa: E501

        :param comment: The comment of this DeployKey.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def key(self):
        """Gets the key of this DeployKey.  # noqa: E501

        The deploy key value.  # noqa: E501

        :return: The key of this DeployKey.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DeployKey.

        The deploy key value.  # noqa: E501

        :param key: The key of this DeployKey.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def label(self):
        """Gets the label of this DeployKey.  # noqa: E501

        The user-defined label for the deploy key  # noqa: E501

        :return: The label of this DeployKey.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DeployKey.

        The user-defined label for the deploy key  # noqa: E501

        :param label: The label of this DeployKey.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_used(self):
        """Gets the last_used of this DeployKey.  # noqa: E501


        :return: The last_used of this DeployKey.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this DeployKey.


        :param last_used: The last_used of this DeployKey.  # noqa: E501
        :type: datetime
        """

        self._last_used = last_used

    @property
    def links(self):
        """Gets the links of this DeployKey.  # noqa: E501


        :return: The links of this DeployKey.  # noqa: E501
        :rtype: BranchingModelSettingsAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DeployKey.


        :param links: The links of this DeployKey.  # noqa: E501
        :type: BranchingModelSettingsAllOfLinks
        """

        self._links = links

    @property
    def owner(self):
        """Gets the owner of this DeployKey.  # noqa: E501


        :return: The owner of this DeployKey.  # noqa: E501
        :rtype: Account
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DeployKey.


        :param owner: The owner of this DeployKey.  # noqa: E501
        :type: Account
        """

        self._owner = owner

    @property
    def repository(self):
        """Gets the repository of this DeployKey.  # noqa: E501


        :return: The repository of this DeployKey.  # noqa: E501
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this DeployKey.


        :param repository: The repository of this DeployKey.  # noqa: E501
        :type: Repository
        """

        self._repository = repository

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

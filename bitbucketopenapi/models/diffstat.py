# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Diffstat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lines_added': 'int',
        'lines_removed': 'int',
        'new': 'CommitFile',
        'old': 'CommitFile',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'lines_added': 'lines_added',
        'lines_removed': 'lines_removed',
        'new': 'new',
        'old': 'old',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, lines_added=None, lines_removed=None, new=None, old=None, status=None, type=None):  # noqa: E501
        """Diffstat - a model defined in OpenAPI"""  # noqa: E501

        self._lines_added = None
        self._lines_removed = None
        self._new = None
        self._old = None
        self._status = None
        self._type = None
        self.discriminator = None

        if lines_added is not None:
            self.lines_added = lines_added
        if lines_removed is not None:
            self.lines_removed = lines_removed
        if new is not None:
            self.new = new
        if old is not None:
            self.old = old
        if status is not None:
            self.status = status
        self.type = type

    @property
    def lines_added(self):
        """Gets the lines_added of this Diffstat.  # noqa: E501


        :return: The lines_added of this Diffstat.  # noqa: E501
        :rtype: int
        """
        return self._lines_added

    @lines_added.setter
    def lines_added(self, lines_added):
        """Sets the lines_added of this Diffstat.


        :param lines_added: The lines_added of this Diffstat.  # noqa: E501
        :type: int
        """

        self._lines_added = lines_added

    @property
    def lines_removed(self):
        """Gets the lines_removed of this Diffstat.  # noqa: E501


        :return: The lines_removed of this Diffstat.  # noqa: E501
        :rtype: int
        """
        return self._lines_removed

    @lines_removed.setter
    def lines_removed(self, lines_removed):
        """Sets the lines_removed of this Diffstat.


        :param lines_removed: The lines_removed of this Diffstat.  # noqa: E501
        :type: int
        """

        self._lines_removed = lines_removed

    @property
    def new(self):
        """Gets the new of this Diffstat.  # noqa: E501


        :return: The new of this Diffstat.  # noqa: E501
        :rtype: CommitFile
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Diffstat.


        :param new: The new of this Diffstat.  # noqa: E501
        :type: CommitFile
        """

        self._new = new

    @property
    def old(self):
        """Gets the old of this Diffstat.  # noqa: E501


        :return: The old of this Diffstat.  # noqa: E501
        :rtype: CommitFile
        """
        return self._old

    @old.setter
    def old(self, old):
        """Sets the old of this Diffstat.


        :param old: The old of this Diffstat.  # noqa: E501
        :type: CommitFile
        """

        self._old = old

    @property
    def status(self):
        """Gets the status of this Diffstat.  # noqa: E501


        :return: The status of this Diffstat.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Diffstat.


        :param status: The status of this Diffstat.  # noqa: E501
        :type: str
        """
        allowed_values = ["added", "removed", "modified", "renamed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Diffstat.  # noqa: E501


        :return: The type of this Diffstat.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Diffstat.


        :param type: The type of this Diffstat.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Diffstat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

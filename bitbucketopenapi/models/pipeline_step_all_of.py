# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PipelineStepAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_on': 'datetime',
        'image': 'PipelineImage',
        'script_commands': 'list[PipelineCommand]',
        'setup_commands': 'list[PipelineCommand]',
        'started_on': 'datetime',
        'state': 'PipelineStepState',
        'uuid': 'str'
    }

    attribute_map = {
        'completed_on': 'completed_on',
        'image': 'image',
        'script_commands': 'script_commands',
        'setup_commands': 'setup_commands',
        'started_on': 'started_on',
        'state': 'state',
        'uuid': 'uuid'
    }

    def __init__(self, completed_on=None, image=None, script_commands=None, setup_commands=None, started_on=None, state=None, uuid=None):  # noqa: E501
        """PipelineStepAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._completed_on = None
        self._image = None
        self._script_commands = None
        self._setup_commands = None
        self._started_on = None
        self._state = None
        self._uuid = None
        self.discriminator = None

        if completed_on is not None:
            self.completed_on = completed_on
        if image is not None:
            self.image = image
        if script_commands is not None:
            self.script_commands = script_commands
        if setup_commands is not None:
            self.setup_commands = setup_commands
        if started_on is not None:
            self.started_on = started_on
        if state is not None:
            self.state = state
        if uuid is not None:
            self.uuid = uuid

    @property
    def completed_on(self):
        """Gets the completed_on of this PipelineStepAllOf.  # noqa: E501

        The timestamp when the step execution was completed. This is not set if the step is still in progress.  # noqa: E501

        :return: The completed_on of this PipelineStepAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this PipelineStepAllOf.

        The timestamp when the step execution was completed. This is not set if the step is still in progress.  # noqa: E501

        :param completed_on: The completed_on of this PipelineStepAllOf.  # noqa: E501
        :type: datetime
        """

        self._completed_on = completed_on

    @property
    def image(self):
        """Gets the image of this PipelineStepAllOf.  # noqa: E501


        :return: The image of this PipelineStepAllOf.  # noqa: E501
        :rtype: PipelineImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PipelineStepAllOf.


        :param image: The image of this PipelineStepAllOf.  # noqa: E501
        :type: PipelineImage
        """

        self._image = image

    @property
    def script_commands(self):
        """Gets the script_commands of this PipelineStepAllOf.  # noqa: E501

        The list of build commands. These commands are executed in the build container.  # noqa: E501

        :return: The script_commands of this PipelineStepAllOf.  # noqa: E501
        :rtype: list[PipelineCommand]
        """
        return self._script_commands

    @script_commands.setter
    def script_commands(self, script_commands):
        """Sets the script_commands of this PipelineStepAllOf.

        The list of build commands. These commands are executed in the build container.  # noqa: E501

        :param script_commands: The script_commands of this PipelineStepAllOf.  # noqa: E501
        :type: list[PipelineCommand]
        """

        self._script_commands = script_commands

    @property
    def setup_commands(self):
        """Gets the setup_commands of this PipelineStepAllOf.  # noqa: E501

        The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.  # noqa: E501

        :return: The setup_commands of this PipelineStepAllOf.  # noqa: E501
        :rtype: list[PipelineCommand]
        """
        return self._setup_commands

    @setup_commands.setter
    def setup_commands(self, setup_commands):
        """Sets the setup_commands of this PipelineStepAllOf.

        The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.  # noqa: E501

        :param setup_commands: The setup_commands of this PipelineStepAllOf.  # noqa: E501
        :type: list[PipelineCommand]
        """

        self._setup_commands = setup_commands

    @property
    def started_on(self):
        """Gets the started_on of this PipelineStepAllOf.  # noqa: E501

        The timestamp when the step execution was started. This is not set when the step hasn't executed yet.  # noqa: E501

        :return: The started_on of this PipelineStepAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on):
        """Sets the started_on of this PipelineStepAllOf.

        The timestamp when the step execution was started. This is not set when the step hasn't executed yet.  # noqa: E501

        :param started_on: The started_on of this PipelineStepAllOf.  # noqa: E501
        :type: datetime
        """

        self._started_on = started_on

    @property
    def state(self):
        """Gets the state of this PipelineStepAllOf.  # noqa: E501


        :return: The state of this PipelineStepAllOf.  # noqa: E501
        :rtype: PipelineStepState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PipelineStepAllOf.


        :param state: The state of this PipelineStepAllOf.  # noqa: E501
        :type: PipelineStepState
        """

        self._state = state

    @property
    def uuid(self):
        """Gets the uuid of this PipelineStepAllOf.  # noqa: E501

        The UUID identifying the step.  # noqa: E501

        :return: The uuid of this PipelineStepAllOf.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PipelineStepAllOf.

        The UUID identifying the step.  # noqa: E501

        :param uuid: The uuid of this PipelineStepAllOf.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineStepAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

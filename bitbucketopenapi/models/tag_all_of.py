# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TagAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'datetime',
        'message': 'str',
        'tagger': 'Author'
    }

    attribute_map = {
        'date': 'date',
        'message': 'message',
        'tagger': 'tagger'
    }

    def __init__(self, date=None, message=None, tagger=None):  # noqa: E501
        """TagAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._date = None
        self._message = None
        self._tagger = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if message is not None:
            self.message = message
        if tagger is not None:
            self.tagger = tagger

    @property
    def date(self):
        """Gets the date of this TagAllOf.  # noqa: E501

        The date that the tag was created, if available  # noqa: E501

        :return: The date of this TagAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TagAllOf.

        The date that the tag was created, if available  # noqa: E501

        :param date: The date of this TagAllOf.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def message(self):
        """Gets the message of this TagAllOf.  # noqa: E501

        The message associated with the tag, if available.  # noqa: E501

        :return: The message of this TagAllOf.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TagAllOf.

        The message associated with the tag, if available.  # noqa: E501

        :param message: The message of this TagAllOf.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def tagger(self):
        """Gets the tagger of this TagAllOf.  # noqa: E501


        :return: The tagger of this TagAllOf.  # noqa: E501
        :rtype: Author
        """
        return self._tagger

    @tagger.setter
    def tagger(self, tagger):
        """Sets the tagger of this TagAllOf.


        :param tagger: The tagger of this TagAllOf.  # noqa: E501
        :type: Author
        """

        self._tagger = tagger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

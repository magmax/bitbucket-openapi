# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AccountAllOfLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar': 'AccountAllOfLinksAvatar',
        'followers': 'AccountAllOfLinksAvatar',
        'following': 'AccountAllOfLinksAvatar',
        'html': 'AccountAllOfLinksAvatar',
        'repositories': 'AccountAllOfLinksAvatar',
        '_self': 'AccountAllOfLinksAvatar'
    }

    attribute_map = {
        'avatar': 'avatar',
        'followers': 'followers',
        'following': 'following',
        'html': 'html',
        'repositories': 'repositories',
        '_self': 'self'
    }

    def __init__(self, avatar=None, followers=None, following=None, html=None, repositories=None, _self=None):  # noqa: E501
        """AccountAllOfLinks - a model defined in OpenAPI"""  # noqa: E501

        self._avatar = None
        self._followers = None
        self._following = None
        self._html = None
        self._repositories = None
        self.__self = None
        self.discriminator = None

        if avatar is not None:
            self.avatar = avatar
        if followers is not None:
            self.followers = followers
        if following is not None:
            self.following = following
        if html is not None:
            self.html = html
        if repositories is not None:
            self.repositories = repositories
        if _self is not None:
            self._self = _self

    @property
    def avatar(self):
        """Gets the avatar of this AccountAllOfLinks.  # noqa: E501


        :return: The avatar of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this AccountAllOfLinks.


        :param avatar: The avatar of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._avatar = avatar

    @property
    def followers(self):
        """Gets the followers of this AccountAllOfLinks.  # noqa: E501


        :return: The followers of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this AccountAllOfLinks.


        :param followers: The followers of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._followers = followers

    @property
    def following(self):
        """Gets the following of this AccountAllOfLinks.  # noqa: E501


        :return: The following of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this AccountAllOfLinks.


        :param following: The following of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._following = following

    @property
    def html(self):
        """Gets the html of this AccountAllOfLinks.  # noqa: E501


        :return: The html of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this AccountAllOfLinks.


        :param html: The html of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._html = html

    @property
    def repositories(self):
        """Gets the repositories of this AccountAllOfLinks.  # noqa: E501


        :return: The repositories of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this AccountAllOfLinks.


        :param repositories: The repositories of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self._repositories = repositories

    @property
    def _self(self):
        """Gets the _self of this AccountAllOfLinks.  # noqa: E501


        :return: The _self of this AccountAllOfLinks.  # noqa: E501
        :rtype: AccountAllOfLinksAvatar
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AccountAllOfLinks.


        :param _self: The _self of this AccountAllOfLinks.  # noqa: E501
        :type: AccountAllOfLinksAvatar
        """

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAllOfLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

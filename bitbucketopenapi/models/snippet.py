# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Snippet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_on': 'datetime',
        'creator': 'Account',
        'id': 'int',
        'is_private': 'bool',
        'owner': 'Account',
        'scm': 'str',
        'title': 'str',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'created_on': 'created_on',
        'creator': 'creator',
        'id': 'id',
        'is_private': 'is_private',
        'owner': 'owner',
        'scm': 'scm',
        'title': 'title',
        'updated_on': 'updated_on'
    }

    def __init__(self, created_on=None, creator=None, id=None, is_private=None, owner=None, scm=None, title=None, updated_on=None):  # noqa: E501
        """Snippet - a model defined in OpenAPI"""  # noqa: E501

        self._created_on = None
        self._creator = None
        self._id = None
        self._is_private = None
        self._owner = None
        self._scm = None
        self._title = None
        self._updated_on = None
        self.discriminator = None

        if created_on is not None:
            self.created_on = created_on
        if creator is not None:
            self.creator = creator
        if id is not None:
            self.id = id
        if is_private is not None:
            self.is_private = is_private
        if owner is not None:
            self.owner = owner
        if scm is not None:
            self.scm = scm
        if title is not None:
            self.title = title
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def created_on(self):
        """Gets the created_on of this Snippet.  # noqa: E501


        :return: The created_on of this Snippet.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Snippet.


        :param created_on: The created_on of this Snippet.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def creator(self):
        """Gets the creator of this Snippet.  # noqa: E501


        :return: The creator of this Snippet.  # noqa: E501
        :rtype: Account
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Snippet.


        :param creator: The creator of this Snippet.  # noqa: E501
        :type: Account
        """

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this Snippet.  # noqa: E501


        :return: The id of this Snippet.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snippet.


        :param id: The id of this Snippet.  # noqa: E501
        :type: int
        """
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def is_private(self):
        """Gets the is_private of this Snippet.  # noqa: E501


        :return: The is_private of this Snippet.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Snippet.


        :param is_private: The is_private of this Snippet.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def owner(self):
        """Gets the owner of this Snippet.  # noqa: E501


        :return: The owner of this Snippet.  # noqa: E501
        :rtype: Account
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Snippet.


        :param owner: The owner of this Snippet.  # noqa: E501
        :type: Account
        """

        self._owner = owner

    @property
    def scm(self):
        """Gets the scm of this Snippet.  # noqa: E501

        The DVCS used to store the snippet.  # noqa: E501

        :return: The scm of this Snippet.  # noqa: E501
        :rtype: str
        """
        return self._scm

    @scm.setter
    def scm(self, scm):
        """Sets the scm of this Snippet.

        The DVCS used to store the snippet.  # noqa: E501

        :param scm: The scm of this Snippet.  # noqa: E501
        :type: str
        """
        allowed_values = ["hg", "git"]  # noqa: E501
        if scm not in allowed_values:
            raise ValueError(
                "Invalid value for `scm` ({0}), must be one of {1}"  # noqa: E501
                .format(scm, allowed_values)
            )

        self._scm = scm

    @property
    def title(self):
        """Gets the title of this Snippet.  # noqa: E501


        :return: The title of this Snippet.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Snippet.


        :param title: The title of this Snippet.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_on(self):
        """Gets the updated_on of this Snippet.  # noqa: E501


        :return: The updated_on of this Snippet.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Snippet.


        :param updated_on: The updated_on of this Snippet.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snippet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IssueChange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'changes': 'IssueChangeChanges',
        'created_on': 'datetime',
        'issue': 'Issue',
        'links': 'IssueChangeLinks',
        'message': 'BaseCommitAllOfSummary',
        'name': 'str',
        'type': 'str',
        'user': 'User'
    }

    attribute_map = {
        'changes': 'changes',
        'created_on': 'created_on',
        'issue': 'issue',
        'links': 'links',
        'message': 'message',
        'name': 'name',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, changes=None, created_on=None, issue=None, links=None, message=None, name=None, type=None, user=None):  # noqa: E501
        """IssueChange - a model defined in OpenAPI"""  # noqa: E501

        self._changes = None
        self._created_on = None
        self._issue = None
        self._links = None
        self._message = None
        self._name = None
        self._type = None
        self._user = None
        self.discriminator = None

        if changes is not None:
            self.changes = changes
        if created_on is not None:
            self.created_on = created_on
        if issue is not None:
            self.issue = issue
        if links is not None:
            self.links = links
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        self.type = type
        if user is not None:
            self.user = user

    @property
    def changes(self):
        """Gets the changes of this IssueChange.  # noqa: E501


        :return: The changes of this IssueChange.  # noqa: E501
        :rtype: IssueChangeChanges
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this IssueChange.


        :param changes: The changes of this IssueChange.  # noqa: E501
        :type: IssueChangeChanges
        """

        self._changes = changes

    @property
    def created_on(self):
        """Gets the created_on of this IssueChange.  # noqa: E501


        :return: The created_on of this IssueChange.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this IssueChange.


        :param created_on: The created_on of this IssueChange.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def issue(self):
        """Gets the issue of this IssueChange.  # noqa: E501


        :return: The issue of this IssueChange.  # noqa: E501
        :rtype: Issue
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this IssueChange.


        :param issue: The issue of this IssueChange.  # noqa: E501
        :type: Issue
        """

        self._issue = issue

    @property
    def links(self):
        """Gets the links of this IssueChange.  # noqa: E501


        :return: The links of this IssueChange.  # noqa: E501
        :rtype: IssueChangeLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IssueChange.


        :param links: The links of this IssueChange.  # noqa: E501
        :type: IssueChangeLinks
        """

        self._links = links

    @property
    def message(self):
        """Gets the message of this IssueChange.  # noqa: E501


        :return: The message of this IssueChange.  # noqa: E501
        :rtype: BaseCommitAllOfSummary
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IssueChange.


        :param message: The message of this IssueChange.  # noqa: E501
        :type: BaseCommitAllOfSummary
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this IssueChange.  # noqa: E501


        :return: The name of this IssueChange.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueChange.


        :param name: The name of this IssueChange.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this IssueChange.  # noqa: E501


        :return: The type of this IssueChange.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssueChange.


        :param type: The type of this IssueChange.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user(self):
        """Gets the user of this IssueChange.  # noqa: E501


        :return: The user of this IssueChange.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IssueChange.


        :param user: The user of this IssueChange.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

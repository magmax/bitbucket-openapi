# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PipelineScheduleAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_on': 'datetime',
        'cron_pattern': 'str',
        'enabled': 'bool',
        'selector': 'PipelineSelector',
        'target': 'PipelineTarget',
        'updated_on': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'created_on': 'created_on',
        'cron_pattern': 'cron_pattern',
        'enabled': 'enabled',
        'selector': 'selector',
        'target': 'target',
        'updated_on': 'updated_on',
        'uuid': 'uuid'
    }

    def __init__(self, created_on=None, cron_pattern=None, enabled=None, selector=None, target=None, updated_on=None, uuid=None):  # noqa: E501
        """PipelineScheduleAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._created_on = None
        self._cron_pattern = None
        self._enabled = None
        self._selector = None
        self._target = None
        self._updated_on = None
        self._uuid = None
        self.discriminator = None

        if created_on is not None:
            self.created_on = created_on
        if cron_pattern is not None:
            self.cron_pattern = cron_pattern
        if enabled is not None:
            self.enabled = enabled
        if selector is not None:
            self.selector = selector
        if target is not None:
            self.target = target
        if updated_on is not None:
            self.updated_on = updated_on
        if uuid is not None:
            self.uuid = uuid

    @property
    def created_on(self):
        """Gets the created_on of this PipelineScheduleAllOf.  # noqa: E501

        The timestamp when the schedule was created.  # noqa: E501

        :return: The created_on of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PipelineScheduleAllOf.

        The timestamp when the schedule was created.  # noqa: E501

        :param created_on: The created_on of this PipelineScheduleAllOf.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def cron_pattern(self):
        """Gets the cron_pattern of this PipelineScheduleAllOf.  # noqa: E501

        The cron expression that the schedule applies.  # noqa: E501

        :return: The cron_pattern of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._cron_pattern

    @cron_pattern.setter
    def cron_pattern(self, cron_pattern):
        """Sets the cron_pattern of this PipelineScheduleAllOf.

        The cron expression that the schedule applies.  # noqa: E501

        :param cron_pattern: The cron_pattern of this PipelineScheduleAllOf.  # noqa: E501
        :type: str
        """

        self._cron_pattern = cron_pattern

    @property
    def enabled(self):
        """Gets the enabled of this PipelineScheduleAllOf.  # noqa: E501

        Whether the schedule is enabled.  # noqa: E501

        :return: The enabled of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PipelineScheduleAllOf.

        Whether the schedule is enabled.  # noqa: E501

        :param enabled: The enabled of this PipelineScheduleAllOf.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def selector(self):
        """Gets the selector of this PipelineScheduleAllOf.  # noqa: E501


        :return: The selector of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: PipelineSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this PipelineScheduleAllOf.


        :param selector: The selector of this PipelineScheduleAllOf.  # noqa: E501
        :type: PipelineSelector
        """

        self._selector = selector

    @property
    def target(self):
        """Gets the target of this PipelineScheduleAllOf.  # noqa: E501


        :return: The target of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: PipelineTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PipelineScheduleAllOf.


        :param target: The target of this PipelineScheduleAllOf.  # noqa: E501
        :type: PipelineTarget
        """

        self._target = target

    @property
    def updated_on(self):
        """Gets the updated_on of this PipelineScheduleAllOf.  # noqa: E501

        The timestamp when the schedule was updated.  # noqa: E501

        :return: The updated_on of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this PipelineScheduleAllOf.

        The timestamp when the schedule was updated.  # noqa: E501

        :param updated_on: The updated_on of this PipelineScheduleAllOf.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def uuid(self):
        """Gets the uuid of this PipelineScheduleAllOf.  # noqa: E501

        The UUID identifying the schedule.  # noqa: E501

        :return: The uuid of this PipelineScheduleAllOf.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PipelineScheduleAllOf.

        The UUID identifying the schedule.  # noqa: E501

        :param uuid: The uuid of this PipelineScheduleAllOf.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineScheduleAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

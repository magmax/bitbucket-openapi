# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WebhookSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'created_at': 'datetime',
        'description': 'str',
        'events': 'list[str]',
        'subject': 'object',
        'subject_type': 'str',
        'url': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'active': 'active',
        'created_at': 'created_at',
        'description': 'description',
        'events': 'events',
        'subject': 'subject',
        'subject_type': 'subject_type',
        'url': 'url',
        'uuid': 'uuid'
    }

    def __init__(self, active=None, created_at=None, description=None, events=None, subject=None, subject_type=None, url=None, uuid=None):  # noqa: E501
        """WebhookSubscription - a model defined in OpenAPI"""  # noqa: E501

        self._active = None
        self._created_at = None
        self._description = None
        self._events = None
        self._subject = None
        self._subject_type = None
        self._url = None
        self._uuid = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if events is not None:
            self.events = events
        if subject is not None:
            self.subject = subject
        if subject_type is not None:
            self.subject_type = subject_type
        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid

    @property
    def active(self):
        """Gets the active of this WebhookSubscription.  # noqa: E501


        :return: The active of this WebhookSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this WebhookSubscription.


        :param active: The active of this WebhookSubscription.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this WebhookSubscription.  # noqa: E501


        :return: The created_at of this WebhookSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookSubscription.


        :param created_at: The created_at of this WebhookSubscription.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this WebhookSubscription.  # noqa: E501

        A user-defined description of the webhook.  # noqa: E501

        :return: The description of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookSubscription.

        A user-defined description of the webhook.  # noqa: E501

        :param description: The description of this WebhookSubscription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def events(self):
        """Gets the events of this WebhookSubscription.  # noqa: E501

        The events this webhook is subscribed to.  # noqa: E501

        :return: The events of this WebhookSubscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhookSubscription.

        The events this webhook is subscribed to.  # noqa: E501

        :param events: The events of this WebhookSubscription.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["pullrequest:unapproved", "issue:comment_created", "pullrequest:approved", "repo:created", "repo:deleted", "repo:imported", "pullrequest:comment_updated", "issue:updated", "project:updated", "pullrequest:comment_created", "repo:commit_status_updated", "pullrequest:updated", "issue:created", "repo:fork", "pullrequest:comment_deleted", "repo:commit_status_created", "repo:updated", "pullrequest:rejected", "pullrequest:fulfilled", "repo:push", "pullrequest:created", "repo:transfer", "repo:commit_comment_created"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def subject(self):
        """Gets the subject of this WebhookSubscription.  # noqa: E501


        :return: The subject of this WebhookSubscription.  # noqa: E501
        :rtype: object
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this WebhookSubscription.


        :param subject: The subject of this WebhookSubscription.  # noqa: E501
        :type: object
        """

        self._subject = subject

    @property
    def subject_type(self):
        """Gets the subject_type of this WebhookSubscription.  # noqa: E501

        The type of entity, which is `repository` in the case of webhook subscriptions on repositories.  # noqa: E501

        :return: The subject_type of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this WebhookSubscription.

        The type of entity, which is `repository` in the case of webhook subscriptions on repositories.  # noqa: E501

        :param subject_type: The subject_type of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "repository", "team"]  # noqa: E501
        if subject_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subject_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subject_type, allowed_values)
            )

        self._subject_type = subject_type

    @property
    def url(self):
        """Gets the url of this WebhookSubscription.  # noqa: E501

        The URL events get delivered to.  # noqa: E501

        :return: The url of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookSubscription.

        The URL events get delivered to.  # noqa: E501

        :param url: The url of this WebhookSubscription.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this WebhookSubscription.  # noqa: E501

        The webhook's id  # noqa: E501

        :return: The uuid of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this WebhookSubscription.

        The webhook's id  # noqa: E501

        :param uuid: The uuid of this WebhookSubscription.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

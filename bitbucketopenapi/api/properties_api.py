# coding: utf-8

"""
    Bitbucket API

    Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@bitbucket.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bitbucketopenapi.api_client import ApiClient
from bitbucketopenapi.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PropertiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_commit_hosted_property_value(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """delete_commit_hosted_property_value  # noqa: E501

        Delete an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_commit_hosted_property_value(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, **kwargs)  # noqa: E501

    def delete_commit_hosted_property_value_with_http_info(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """delete_commit_hosted_property_value  # noqa: E501

        Delete an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'commit', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_commit_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `delete_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'commit' is set
        if ('commit' not in local_var_params or
                local_var_params['commit'] is None):
            raise ApiValueError("Missing the required parameter `commit` when calling `delete_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `delete_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `delete_commit_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'commit' in local_var_params:
            path_params['commit'] = local_var_params['commit']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pull_request_hosted_property_value(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """delete_pull_request_hosted_property_value  # noqa: E501

        Delete an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pull_request_hosted_property_value(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, **kwargs)  # noqa: E501

    def delete_pull_request_hosted_property_value_with_http_info(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """delete_pull_request_hosted_property_value  # noqa: E501

        Delete an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'pullrequest_id', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pull_request_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `delete_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'pullrequest_id' is set
        if ('pullrequest_id' not in local_var_params or
                local_var_params['pullrequest_id'] is None):
            raise ApiValueError("Missing the required parameter `pullrequest_id` when calling `delete_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `delete_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `delete_pull_request_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'pullrequest_id' in local_var_params:
            path_params['pullrequest_id'] = local_var_params['pullrequest_id']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_repository_hosted_property_value(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """delete_repository_hosted_property_value  # noqa: E501

        Delete an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repository_hosted_property_value(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, **kwargs)  # noqa: E501

    def delete_repository_hosted_property_value_with_http_info(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """delete_repository_hosted_property_value  # noqa: E501

        Delete an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_repository_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `delete_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `delete_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `delete_repository_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_hosted_property_value(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """delete_user_hosted_property_value  # noqa: E501

        Delete an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_hosted_property_value(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_user_hosted_property_value_with_http_info(username, app_key, property_name, **kwargs)  # noqa: E501

    def delete_user_hosted_property_value_with_http_info(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """delete_user_hosted_property_value  # noqa: E501

        Delete an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_hosted_property_value_with_http_info(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `delete_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `delete_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `delete_user_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/properties/{app_key}/{property_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_commit_hosted_property_value(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """get_commit_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_hosted_property_value(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, **kwargs)  # noqa: E501

    def get_commit_hosted_property_value_with_http_info(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """get_commit_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'commit', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commit_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `get_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'commit' is set
        if ('commit' not in local_var_params or
                local_var_params['commit'] is None):
            raise ApiValueError("Missing the required parameter `commit` when calling `get_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `get_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `get_commit_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'commit' in local_var_params:
            path_params['commit'] = local_var_params['commit']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pull_request_hosted_property_value(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """get_pull_request_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_request_hosted_property_value(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, **kwargs)  # noqa: E501

    def get_pull_request_hosted_property_value_with_http_info(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """get_pull_request_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'pullrequest_id', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pull_request_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `get_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'pullrequest_id' is set
        if ('pullrequest_id' not in local_var_params or
                local_var_params['pullrequest_id'] is None):
            raise ApiValueError("Missing the required parameter `pullrequest_id` when calling `get_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `get_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `get_pull_request_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'pullrequest_id' in local_var_params:
            path_params['pullrequest_id'] = local_var_params['pullrequest_id']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repository_hosted_property_value(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """get_repository_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_hosted_property_value(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, **kwargs)  # noqa: E501

    def get_repository_hosted_property_value_with_http_info(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """get_repository_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `get_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `get_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `get_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `get_repository_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_user_hosted_property_value(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """retrieve_user_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_user_hosted_property_value(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.retrieve_user_hosted_property_value_with_http_info(username, app_key, property_name, **kwargs)  # noqa: E501

    def retrieve_user_hosted_property_value_with_http_info(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """retrieve_user_hosted_property_value  # noqa: E501

        Retrieve an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_user_hosted_property_value_with_http_info(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_user_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `retrieve_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `retrieve_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `retrieve_user_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/properties/{app_key}/{property_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_commit_hosted_property_value(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """update_commit_hosted_property_value  # noqa: E501

        Update an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_commit_hosted_property_value(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, **kwargs)  # noqa: E501

    def update_commit_hosted_property_value_with_http_info(self, username, repo_slug, commit, app_key, property_name, **kwargs):  # noqa: E501
        """update_commit_hosted_property_value  # noqa: E501

        Update an application property value stored against a commit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_commit_hosted_property_value_with_http_info(username, repo_slug, commit, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str commit: The commit. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'commit', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_commit_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `update_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `update_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'commit' is set
        if ('commit' not in local_var_params or
                local_var_params['commit'] is None):
            raise ApiValueError("Missing the required parameter `commit` when calling `update_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `update_commit_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `update_commit_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'commit' in local_var_params:
            path_params['commit'] = local_var_params['commit']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pull_request_hosted_property_value(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """update_pull_request_hosted_property_value  # noqa: E501

        Update an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pull_request_hosted_property_value(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, **kwargs)  # noqa: E501

    def update_pull_request_hosted_property_value_with_http_info(self, username, repo_slug, pullrequest_id, app_key, property_name, **kwargs):  # noqa: E501
        """update_pull_request_hosted_property_value  # noqa: E501

        Update an application property value stored against a pull request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pull_request_hosted_property_value_with_http_info(username, repo_slug, pullrequest_id, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str pullrequest_id: The pull request ID. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'pullrequest_id', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pull_request_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `update_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `update_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'pullrequest_id' is set
        if ('pullrequest_id' not in local_var_params or
                local_var_params['pullrequest_id'] is None):
            raise ApiValueError("Missing the required parameter `pullrequest_id` when calling `update_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `update_pull_request_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `update_pull_request_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'pullrequest_id' in local_var_params:
            path_params['pullrequest_id'] = local_var_params['pullrequest_id']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_repository_hosted_property_value(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """update_repository_hosted_property_value  # noqa: E501

        Update an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository_hosted_property_value(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, **kwargs)  # noqa: E501

    def update_repository_hosted_property_value_with_http_info(self, username, repo_slug, app_key, property_name, **kwargs):  # noqa: E501
        """update_repository_hosted_property_value  # noqa: E501

        Update an application property value stored against a repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository_hosted_property_value_with_http_info(username, repo_slug, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The account. (required)
        :param str repo_slug: The repository. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'repo_slug', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `update_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'repo_slug' is set
        if ('repo_slug' not in local_var_params or
                local_var_params['repo_slug'] is None):
            raise ApiValueError("Missing the required parameter `repo_slug` when calling `update_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `update_repository_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `update_repository_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'repo_slug' in local_var_params:
            path_params['repo_slug'] = local_var_params['repo_slug']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_hosted_property_value(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """update_user_hosted_property_value  # noqa: E501

        Update an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_hosted_property_value(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_user_hosted_property_value_with_http_info(username, app_key, property_name, **kwargs)  # noqa: E501

    def update_user_hosted_property_value_with_http_info(self, username, app_key, property_name, **kwargs):  # noqa: E501
        """update_user_hosted_property_value  # noqa: E501

        Update an application property value stored against a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_hosted_property_value_with_http_info(username, app_key, property_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The user. (required)
        :param str app_key: The key of the Connect app. (required)
        :param str property_name: The name of the property. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['username', 'app_key', 'property_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_hosted_property_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in local_var_params or
                local_var_params['username'] is None):
            raise ApiValueError("Missing the required parameter `username` when calling `update_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'app_key' is set
        if ('app_key' not in local_var_params or
                local_var_params['app_key'] is None):
            raise ApiValueError("Missing the required parameter `app_key` when calling `update_user_hosted_property_value`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if ('property_name' not in local_var_params or
                local_var_params['property_name'] is None):
            raise ApiValueError("Missing the required parameter `property_name` when calling `update_user_hosted_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'app_key' in local_var_params:
            path_params['app_key'] = local_var_params['app_key']  # noqa: E501
        if 'property_name' in local_var_params:
            path_params['property_name'] = local_var_params['property_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}/properties/{app_key}/{property_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
